(define (int->bint oport sexp)
  (if (number? sexp)
      (let ((x (string-append "i" (number->string sexp) "e")))
	(write-string x (string-length x) oport))
      (error "Not a number: " sexp)))

(define (string->bstring oport sexp)
  (if (string? sexp)
      (write-string sexp (string-length sexp) oport)
      (error "Not a string: " sexp)))

(define (list->blist oport sexp)
  (if (list? sexp)
      (let* ((x (map encode sexp))
	     (y (foldl string-append "" x))
	     (z (string-append "l" y "e")))
	(write-string z (string-length z) oport))
      (error "Not a list: " sexp)))

(define (alist->bdict oport sexp)
  (if (alist? sexp)
      (let* ((l (fold cons* '()
		      (reverse (map car sexp))
		      (reverse (map cdr sexp))))
	     (x (map encode l))
	     (y (foldl string-append "" x))
	     (z (string-append "d" y "e")))
	(write-string z (string-length z) oport))
      (error "Not a alist: " sexp)))


(define (encode oport sexp)
  (case sexp
    ((number?) int->bint oport sexp)
    ((string?) string->bstring oport sexp)
    ((list?) list->blist oport sexp)
    ((alist?) alist->bdict oport sexp)
    (else (error "Don't know how to encode: " sexp))))
